/**
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
apply plugin: 'com.android.library'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'kotlin-android'

ext {
    srcFolders = file("./").listFiles().findAll {
        !it.isFile() && !it.name.startsWith("gradle") && !it.name.startsWith("test")
    }.collect { "./" + it.name + "/src/main/java" }
}

jacoco {
    toolVersion = rootProject.ext.jacocoVersion
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.moduleVersion

        testInstrumentationRunner rootProject.ext.testInstrumentationRunner
        consumerProguardFiles 'consumer-rules.pro'
    }

    flavorDimensions "target"
    productFlavors {
        phone {
            dimension "target"
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
            debuggable true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    compileOptions {
        sourceCompatibility rootProject.ext.sourceCompatibility
        targetCompatibility rootProject.ext.targetCompatibility
    }
}

afterEvaluate {
    tasks.withType(Javadoc) {
        source = [android.sourceSets.main.java.sourceFiles, android.sourceSets.phone.java.sourceFiles]
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        classpath += files(android.libraryVariants.collect { variant ->
            variant.javaCompileProvider.get().classpath.files
        })
        options {
            source = "8"
            links "https://developer.android.com/reference"
        }
    }
}

task javadocInternal(type: Javadoc) {
    destinationDir = reporting.file("javadocInternal")
    options.memberLevel = JavadocMemberLevel.PRIVATE
}

task javadocPublic(type: Javadoc) {
    destinationDir = reporting.file("javadocPublic")
    options.memberLevel = JavadocMemberLevel.PUBLIC
}

task javadocPublish(type: Jar) {
    from javadocPublic
    archiveClassifier.set('javadoc')
}

def isReleaseBuild() {
    return hasProperty('release')
}

version = isReleaseBuild() ? rootProject.moduleVersion : rootProject.moduleVersion+"-SNAPSHOT"

publish.dependsOn('assemblePhone')

publishing {
    publications {
        release(MavenPublication) {
            groupId = 'com.adobe.marketing.mobile'
            artifactId = rootProject.moduleName
            version = version
            artifact("$buildDir/outputs/aar/${rootProject.moduleAARName}")
            artifact javadocPublish

            pom {
                name = mavenRepoName
                description = mavenRepoDescription
                url = 'https://developer.adobe.com/client-sdks'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'adobe'
                        name = 'adobe'
                        email = 'adobe-mobile-testing@adobe.com'
                    }
                }
                scm {
                    connection = 'scm:git:github.com//adobe/aepsdk-target-android.git'
                    developerConnection = 'scm:git:ssh://github.com/adobe/aepsdk-target-android.git'
                    url = 'https://github.com/adobe/aepsdk-target-android'
                }
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    def coreDependencyNode = dependenciesNode.appendNode('dependency')
                    coreDependencyNode.appendNode('groupId', 'com.adobe.marketing.mobile')
                    coreDependencyNode.appendNode('artifactId', 'core')
                    coreDependencyNode.appendNode('version', mavenCoreVersion)
                }
            }
        }
    }
    repositories {
        maven {
            name = "sonatype"
            url = version.endsWith('SNAPSHOT') ? "https://oss.sonatype.org/content/repositories/snapshots/" : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = System.getenv("SONATYPE_USERNAME")
                password = System.getenv("SONATYPE_PASSWORD")
            }
        }
    }
}

ext."signing.gnupg.executable"="gpg"
ext."signing.gnupg.keyName"=System.getenv("GPG_KEY_ID")
ext."signing.gnupg.passphrase"=System.getenv("GPG_PASSPHRASE")

signing {
    useGpgCmd()
    required {
        tasks.withType(PublishToMavenRepository).find {
            gradle.taskGraph.hasTask it
        }
    }
    sign publishing.publications
}

task platformUnitTestJacocoReport(type: JacocoReport, dependsOn: "testPhoneDebugUnitTest") {
    def excludeRegex = ['**/ADB*.class', '**/BuildConfig.class']
    def javaClasses = fileTree(dir: "${project.buildDir}/intermediates/javac/phoneDebug/classes", excludes: excludeRegex)
    def kotlinClasses = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/phoneDebug", excludes: excludeRegex)
    classDirectories.setFrom(files([javaClasses, kotlinClasses]))

    def mainSrc = "${project.projectDir}/src/main/java"
    def phoneSrc = "${project.projectDir}/src/phone/java"
    sourceDirectories.setFrom files([mainSrc, phoneSrc])

    executionData.setFrom fileTree(dir: "$buildDir", includes: [
            "outputs/unit_test_code_coverage/phoneDebugUnitTest/testPhoneDebugUnitTest.exec",
    ])

    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}

task platformFunctionalTestJacocoReport(type: JacocoReport, dependsOn: "createPhoneDebugCoverageReport") {
    def excludeRegex = ['**/ADB*.class', '**/BuildConfig.class']
    def javaClasses = fileTree(dir: "${project.buildDir}/intermediates/javac/phoneDebug/classes", excludes: excludeRegex)
    def kotlinClasses = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/phoneDebug", excludes: excludeRegex)
    classDirectories.setFrom(files([javaClasses, kotlinClasses]))

    def mainSrc = "${project.projectDir}/src/main/java"
    def phoneSrc = "${project.projectDir}/src/phone/java"
    sourceDirectories.setFrom files([mainSrc, phoneSrc])

    executionData.setFrom fileTree(dir: "$buildDir", includes: [
            "outputs/code_coverage/phoneDebugAndroidTest/connected/*coverage.ec"
    ])
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled false
    }
}

apply from: '../checkstyle.gradle'

dependencies {
    implementation "androidx.annotation:annotation:1.0.0"

    // Adobe Mobile SDK Core
    implementation 'com.adobe.marketing.mobile:core:2.0.1'

    testImplementation "androidx.test.ext:junit:${rootProject.ext.junitVersion}"
    testImplementation "org.mockito:mockito-core:${rootProject.ext.mockitoCoreVersion}"
    testImplementation "org.mockito:mockito-inline:${rootProject.ext.mockitoCoreVersion}"
    testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.9.9'
    testImplementation 'org.json:json:20180813'

    androidTestImplementation 'com.adobe.marketing.mobile:identity:2.0.0'
    androidTestImplementation "androidx.test.ext:junit:${rootProject.ext.junitVersion}"
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'com.fasterxml.jackson.core:jackson-databind:2.9.9'
}

tasks.withType(Test) {
    testLogging {
        showStandardStreams = true
    }
}
